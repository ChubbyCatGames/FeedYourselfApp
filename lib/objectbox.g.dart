// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'ProductObject.dart';
import 'allergensData.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5008384711528315705),
      name: 'ProductObject',
      lastPropertyId: const IdUid(6, 4918098849481590416),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1365682112609899515),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(4, 532627089929930978),
            name: 'idProduct',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4918098849481590416),
            name: 'barCode',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6467918117710655503),
      name: 'AllergensData',
      lastPropertyId: const IdUid(4, 6944445547569296469),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 651981210591497487),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3196279535286405156),
            name: 'isChecked',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7303221391444807547),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6944445547569296469),
            name: 'idAllergy',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 6467918117710655503),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5354522813894601113,
        3276619982039123702,
        7234717175984047809
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ProductObject: EntityDefinition<ProductObject>(
        model: _entities[0],
        toOneRelations: (ProductObject object) => [],
        toManyRelations: (ProductObject object) => {},
        getId: (ProductObject object) => object.id,
        setId: (ProductObject object, int id) {
          object.id = id;
        },
        objectToFB: (ProductObject object, fb.Builder fbb) {
          final barCodeOffset =
              object.barCode == null ? null : fbb.writeString(object.barCode!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(3, object.idProduct);
          fbb.addOffset(5, barCodeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductObject(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              idProduct: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              barCode: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14));

          return object;
        }),
    AllergensData: EntityDefinition<AllergensData>(
        model: _entities[1],
        toOneRelations: (AllergensData object) => [],
        toManyRelations: (AllergensData object) => {},
        getId: (AllergensData object) => object.id,
        setId: (AllergensData object, int id) {
          object.id = id;
        },
        objectToFB: (AllergensData object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.isChecked);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.idAllergy);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AllergensData(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              idAllergy:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              isChecked: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 6));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ProductObject] entity fields to define ObjectBox queries.
class ProductObject_ {
  /// see [ProductObject.id]
  static final id =
      QueryIntegerProperty<ProductObject>(_entities[0].properties[0]);

  /// see [ProductObject.idProduct]
  static final idProduct =
      QueryIntegerProperty<ProductObject>(_entities[0].properties[1]);

  /// see [ProductObject.barCode]
  static final barCode =
      QueryStringProperty<ProductObject>(_entities[0].properties[2]);
}

/// [AllergensData] entity fields to define ObjectBox queries.
class AllergensData_ {
  /// see [AllergensData.id]
  static final id =
      QueryIntegerProperty<AllergensData>(_entities[1].properties[0]);

  /// see [AllergensData.isChecked]
  static final isChecked =
      QueryBooleanProperty<AllergensData>(_entities[1].properties[1]);

  /// see [AllergensData.name]
  static final name =
      QueryStringProperty<AllergensData>(_entities[1].properties[2]);

  /// see [AllergensData.idAllergy]
  static final idAllergy =
      QueryIntegerProperty<AllergensData>(_entities[1].properties[3]);
}
